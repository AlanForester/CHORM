package main

import (
	"context"
	"fmt"
	"log"
	"time"

	"github.com/AlanForester/chorm"
)

// User –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
type User struct {
	ID       uint32    `ch:"id" ch_type:"UInt32" ch_pk:"true"`
	Name     string    `ch:"name" ch_type:"String"`
	Email    string    `ch:"email" ch_type:"String"`
	Age      uint8     `ch:"age" ch_type:"UInt8"`
	Created  time.Time `ch:"created" ch_type:"DateTime"`
	Updated  time.Time `ch:"updated" ch_type:"DateTime"`
	IsActive bool      `ch:"is_active" ch_type:"Boolean"`
	Score    float64   `ch:"score" ch_type:"Float64"`
}

// TableName –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–º—è —Ç–∞–±–ª–∏—Ü—ã
func (u *User) TableName() string {
	return "users"
}

// Order –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –∑–∞–∫–∞–∑
type Order struct {
	ID        uint32    `ch:"id" ch_type:"UInt32" ch_pk:"true"`
	UserID    uint32    `ch:"user_id" ch_type:"UInt32"`
	ProductID uint32    `ch:"product_id" ch_type:"UInt32"`
	Quantity  uint16    `ch:"quantity" ch_type:"UInt16"`
	Price     float64   `ch:"price" ch_type:"Float64"`
	Total     float64   `ch:"total" ch_type:"Float64"`
	Status    string    `ch:"status" ch_type:"String"`
	Created   time.Time `ch:"created" ch_type:"DateTime"`
	Completed time.Time `ch:"completed" ch_type:"DateTime"`
}

// TableName –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–º—è —Ç–∞–±–ª–∏—Ü—ã
func (o *Order) TableName() string {
	return "orders"
}

func main() {
	ctx := context.Background()

	fmt.Println("üöÄ CHORM - ClickHouse ORM –¥–ª—è Go")
	fmt.Println("==================================")

	// –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ ClickHouse
	fmt.Println("\nüì° –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ ClickHouse...")
	db, err := chorm.Connect(ctx, chorm.Config{
		Host:     "localhost",
		Port:     9000,
		Database: "test",
		Username: "default",
		Password: "",
		Debug:    true,
	})
	if err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: %v", err)
		log.Println("üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ ClickHouse –∑–∞–ø—É—â–µ–Ω –Ω–∞ localhost:9000")
		return
	}
	defer db.Close()
	fmt.Println("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")

	// –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
	fmt.Println("\nüèóÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü...")
	if err := db.CreateTable(ctx, &User{}); err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã users: %v", err)
		return
	}
	if err := db.CreateTable(ctx, &Order{}); err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã orders: %v", err)
		return
	}
	fmt.Println("‚úÖ –¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã")

	// –í—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
	fmt.Println("\nüìù –í—Å—Ç–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")

	// –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
	users := []*User{
		{
			ID:       1,
			Name:     "–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤",
			Email:    "ivan@example.com",
			Age:      25,
			Created:  time.Now(),
			Updated:  time.Now(),
			IsActive: true,
			Score:    85.5,
		},
		{
			ID:       2,
			Name:     "–ú–∞—Ä–∏—è –ü–µ—Ç—Ä–æ–≤–∞",
			Email:    "maria@example.com",
			Age:      30,
			Created:  time.Now(),
			Updated:  time.Now(),
			IsActive: true,
			Score:    92.3,
		},
		{
			ID:       3,
			Name:     "–ê–ª–µ–∫—Å–µ–π –°–∏–¥–æ—Ä–æ–≤",
			Email:    "alex@example.com",
			Age:      28,
			Created:  time.Now(),
			Updated:  time.Now(),
			IsActive: false,
			Score:    78.9,
		},
	}

	for _, user := range users {
		if err := db.Insert(ctx, user); err != nil {
			log.Printf("‚ùå –û—à–∏–±–∫–∞ –≤—Å—Ç–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: %v", err)
			return
		}
	}

	// –ó–∞–∫–∞–∑—ã
	orders := []*Order{
		{
			ID:        1,
			UserID:    1,
			ProductID: 101,
			Quantity:  2,
			Price:     1500.0,
			Total:     3000.0,
			Status:    "completed",
			Created:   time.Now().Add(-24 * time.Hour),
			Completed: time.Now().Add(-23 * time.Hour),
		},
		{
			ID:        2,
			UserID:    2,
			ProductID: 102,
			Quantity:  1,
			Price:     2500.0,
			Total:     2500.0,
			Status:    "pending",
			Created:   time.Now().Add(-12 * time.Hour),
		},
		{
			ID:        3,
			UserID:    1,
			ProductID: 103,
			Quantity:  3,
			Price:     800.0,
			Total:     2400.0,
			Status:    "completed",
			Created:   time.Now().Add(-6 * time.Hour),
			Completed: time.Now().Add(-5 * time.Hour),
		},
	}

	for _, order := range orders {
		if err := db.Insert(ctx, order); err != nil {
			log.Printf("‚ùå –û—à–∏–±–∫–∞ –≤—Å—Ç–∞–≤–∫–∏ –∑–∞–∫–∞–∑–∞: %v", err)
			return
		}
	}

	fmt.Println("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤—Å—Ç–∞–≤–ª–µ–Ω—ã")

	// –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–æ—Å—Ç—Ä–æ–∏—Ç–µ–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤
	fmt.Println("\nüîç –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–æ—Å—Ç—Ä–æ–∏—Ç–µ–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤...")

	// –ü–æ–∏—Å–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å—Ç–∞—Ä—à–µ 25 –ª–µ—Ç
	query := db.NewQuery().
		Table("users").
		Select("id", "name", "email", "age", "score").
		Where("age > ?", 25).
		Where("is_active = ?", true).
		OrderBy("score", "DESC")

	var activeUsers []User
	if err := query.All(ctx, &activeUsers); err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: %v", err)
		return
	}

	fmt.Printf("üë• –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å—Ç–∞—Ä—à–µ 25 –ª–µ—Ç (%d):\n", len(activeUsers))
	for _, user := range activeUsers {
		fmt.Printf("  - %s (%s), –≤–æ–∑—Ä–∞—Å—Ç: %d, —Ä–µ–π—Ç–∏–Ω–≥: %.1f\n",
			user.Name, user.Email, user.Age, user.Score)
	}

	// –ü–æ–¥—Å—á–µ—Ç –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
	count, err := query.Count(ctx)
	if err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥—Å—á–µ—Ç–∞: %v", err)
		return
	}
	fmt.Printf("üìä –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å—Ç–∞—Ä—à–µ 25: %d\n", count)

	// –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∞–≥—Ä–µ–≥–∞—Ç–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
	fmt.Println("\nüìä –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∞–≥—Ä–µ–≥–∞—Ç–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π...")

	aggQuery := db.NewQuery().Table("orders")
	agg := aggQuery.NewAggregate().
		Count("*").
		Sum("total").
		Avg("total").
		Max("total").
		Min("total")

	var aggResult map[string]interface{}
	if err := agg.Get(ctx, &aggResult); err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –∞–≥—Ä–µ–≥–∞—Ü–∏–∏: %v", err)
		return
	}

	fmt.Println("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∑–∞–∫–∞–∑–∞–º:")
	fmt.Printf("  - –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤: %v\n", aggResult["count"])
	fmt.Printf("  - –û–±—â–∞—è —Å—É–º–º–∞: %.2f\n", aggResult["sum_total"])
	fmt.Printf("  - –°—Ä–µ–¥–Ω—è—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞: %.2f\n", aggResult["avg_total"])
	fmt.Printf("  - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: %.2f\n", aggResult["max_total"])
	fmt.Printf("  - –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: %.2f\n", aggResult["min_total"])

	// –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
	fmt.Println("\nüë§ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:")
	groupQuery := db.NewQuery().
		Table("orders").
		Select("user_id", "COUNT(*) as order_count", "SUM(total) as total_spent").
		GroupBy("user_id").
		OrderBy("total_spent", "DESC")

	var userStats []map[string]interface{}
	if err := groupQuery.All(ctx, &userStats); err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏: %v", err)
		return
	}

	for _, stat := range userStats {
		fmt.Printf("  - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID %v: %v –∑–∞–∫–∞–∑–æ–≤, –æ–±—â–∞—è —Å—É–º–º–∞ %.2f\n",
			stat["user_id"], stat["order_count"], stat["total_spent"])
	}

	// –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
	fmt.Println("\nüìÑ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏...")

	paginateQuery := db.NewQuery().
		Table("users").
		Select("id", "name", "email", "score").
		OrderBy("score", "DESC")

	var pageUsers []User
	total, err := paginateQuery.Paginate(ctx, 1, 2, &pageUsers)
	if err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏: %v", err)
		return
	}

	fmt.Printf("üìñ –°—Ç—Ä–∞–Ω–∏—Ü–∞ 1 (–ø–æ–∫–∞–∑–∞–Ω–æ %d –∏–∑ %d –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π):\n", len(pageUsers), total)
	for _, user := range pageUsers {
		fmt.Printf("  - %s (%s), —Ä–µ–π—Ç–∏–Ω–≥: %.1f\n", user.Name, user.Email, user.Score)
	}

	// –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è JOIN –∑–∞–ø—Ä–æ—Å–æ–≤
	fmt.Println("\nüîó –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è JOIN –∑–∞–ø—Ä–æ—Å–æ–≤...")

	joinQuery := db.NewQuery().
		Table("orders").
		Select("orders.id", "users.name", "orders.total", "orders.status").
		Join("users", "orders.user_id = users.id").
		Where("orders.status = ?", "completed").
		OrderBy("orders.total", "DESC")

	var joinResults []map[string]interface{}
	if err := joinQuery.All(ctx, &joinResults); err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ JOIN –∑–∞–ø—Ä–æ—Å–∞: %v", err)
		return
	}

	fmt.Println("üõí –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã:")
	for _, result := range joinResults {
		fmt.Printf("  - –ó–∞–∫–∞–∑ #%v: %s, —Å—É–º–º–∞ %.2f, —Å—Ç–∞—Ç—É—Å: %s\n",
			result["id"], result["name"], result["total"], result["status"])
	}

	// –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
	fmt.Println("\n‚úèÔ∏è –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö...")

	updateQuery := db.NewQuery().
		Table("users").
		Where("id = ?", 3)

	result, err := updateQuery.Update(ctx, map[string]interface{}{
		"is_active": true,
		"score":     85.0,
		"updated":   time.Now(),
	})
	if err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: %v", err)
		return
	}

	fmt.Printf("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: %d\n", result.RowsAffected)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
	var updatedUser User
	err = db.QueryRow(ctx, &updatedUser, "SELECT * FROM users WHERE id = ?", 3)
	if err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: %v", err)
		return
	}

	fmt.Printf("üë§ –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: %s, –∞–∫—Ç–∏–≤–µ–Ω: %v, —Ä–µ–π—Ç–∏–Ω–≥: %.1f\n",
		updatedUser.Name, updatedUser.IsActive, updatedUser.Score)

	// –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
	fmt.Println("\nüóëÔ∏è –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö...")

	deleteQuery := db.NewQuery().
		Table("orders").
		Where("status = ?", "pending")

	deleteResult, err := deleteQuery.Delete(ctx)
	if err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: %v", err)
		return
	}

	fmt.Printf("‚úÖ –£–¥–∞–ª–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 'pending': %d\n", deleteResult.RowsAffected)

	// –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
	fmt.Println("\nüìä –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")

	var finalUserCount int64
	err = db.QueryRow(ctx, &finalUserCount, "SELECT COUNT(*) FROM users")
	if err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥—Å—á–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: %v", err)
		return
	}

	var finalOrderCount int64
	err = db.QueryRow(ctx, &finalOrderCount, "SELECT COUNT(*) FROM orders")
	if err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥—Å—á–µ—Ç–∞ –∑–∞–∫–∞–∑–æ–≤: %v", err)
		return
	}

	fmt.Printf("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ: %d\n", finalUserCount)
	fmt.Printf("üõí –ó–∞–∫–∞–∑–æ–≤ –≤ –±–∞–∑–µ: %d\n", finalOrderCount)

	fmt.Println("\nüéâ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
	fmt.Println("üìö –ü–æ–¥—Ä–æ–±–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: https://github.com/AlanForester/chorm")
}
